
SpideyBoot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000272  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000100  00800100  00800100  000002e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ab5  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000822  00000000  00000000  00000e65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000050a  00000000  00000000  00001687  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000460  00000000  00000000  00001c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000035d  00000000  00000000  000020a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002401  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	22 e0       	ldi	r18, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 22 01 	call	0x244	; 0x244 <main>
  88:	0c 94 37 01 	jmp	0x26e	; 0x26e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <usart_init>:
		}
	}
}

void appStart(){
	asm("jmp 0x00000");
  90:	88 e9       	ldi	r24, 0x98	; 152
  92:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  96:	86 e0       	ldi	r24, 0x06	; 6
  98:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  9c:	88 e0       	ldi	r24, 0x08	; 8
  9e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  a2:	08 95       	ret

000000a4 <acknowledge_uart>:
  a4:	e0 ec       	ldi	r30, 0xC0	; 192
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	90 81       	ld	r25, Z
  aa:	95 ff       	sbrs	r25, 5
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <acknowledge_uart+0x4>
  ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  b2:	08 95       	ret

000000b4 <read_uart>:
  b4:	e0 ec       	ldi	r30, 0xC0	; 192
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	88 23       	and	r24, r24
  bc:	ec f7       	brge	.-6      	; 0xb8 <read_uart+0x4>
  be:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  c2:	08 95       	ret

000000c4 <boot_program_page>:
  c4:	ff 92       	push	r15
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	ec 01       	movw	r28, r24
  d0:	ff b6       	in	r15, 0x3f	; 63
  d2:	f8 94       	cli
  d4:	f9 99       	sbic	0x1f, 1	; 31
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <boot_program_page+0x10>
  d8:	83 e0       	ldi	r24, 0x03	; 3
  da:	fe 01       	movw	r30, r28
  dc:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
  e0:	e8 95       	spm
  e2:	07 b6       	in	r0, 0x37	; 55
  e4:	00 fc       	sbrc	r0, 0
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <boot_program_page+0x1e>
  e8:	8b 01       	movw	r16, r22
  ea:	00 58       	subi	r16, 0x80	; 128
  ec:	1f 4f       	sbci	r17, 0xFF	; 255
  ee:	db 01       	movw	r26, r22
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	ae 01       	movw	r20, r28
  f4:	46 1b       	sub	r20, r22
  f6:	57 0b       	sbc	r21, r23
  f8:	9c 91       	ld	r25, X
  fa:	fa 01       	movw	r30, r20
  fc:	ea 0f       	add	r30, r26
  fe:	fb 1f       	adc	r31, r27
 100:	11 96       	adiw	r26, 0x01	; 1
 102:	2c 91       	ld	r18, X
 104:	11 97       	sbiw	r26, 0x01	; 1
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	32 2f       	mov	r19, r18
 10a:	22 27       	eor	r18, r18
 10c:	29 0f       	add	r18, r25
 10e:	31 1d       	adc	r19, r1
 110:	09 01       	movw	r0, r18
 112:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 116:	e8 95       	spm
 118:	11 24       	eor	r1, r1
 11a:	12 96       	adiw	r26, 0x02	; 2
 11c:	a0 17       	cp	r26, r16
 11e:	b1 07       	cpc	r27, r17
 120:	59 f7       	brne	.-42     	; 0xf8 <boot_program_page+0x34>
 122:	85 e0       	ldi	r24, 0x05	; 5
 124:	fe 01       	movw	r30, r28
 126:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 12a:	e8 95       	spm
 12c:	07 b6       	in	r0, 0x37	; 55
 12e:	00 fc       	sbrc	r0, 0
 130:	fd cf       	rjmp	.-6      	; 0x12c <boot_program_page+0x68>
 132:	81 e1       	ldi	r24, 0x11	; 17
 134:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 138:	e8 95       	spm
 13a:	ff be       	out	0x3f, r15	; 63
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	ff 90       	pop	r15
 146:	08 95       	ret

00000148 <readcode>:
 148:	9f e0       	ldi	r25, 0x0F	; 15
 14a:	88 e1       	ldi	r24, 0x18	; 24
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	f8 94       	cli
 150:	a8 95       	wdr
 152:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 156:	0f be       	out	0x3f, r0	; 63
 158:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
 15c:	e1 2c       	mov	r14, r1
 15e:	f1 2c       	mov	r15, r1
 160:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_uart>
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	41 f4       	brne	.+16     	; 0x178 <readcode+0x30>
 168:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_uart>
 16c:	89 30       	cpi	r24, 0x09	; 9
 16e:	c1 f7       	brne	.-16     	; 0x160 <readcode+0x18>
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	0e 94 52 00 	call	0xa4	; 0xa4 <acknowledge_uart>
 176:	f4 cf       	rjmp	.-24     	; 0x160 <readcode+0x18>
 178:	85 30       	cpi	r24, 0x05	; 5
 17a:	89 f4       	brne	.+34     	; 0x19e <readcode+0x56>
 17c:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_uart>
 180:	89 30       	cpi	r24, 0x09	; 9
 182:	71 f7       	brne	.-36     	; 0x160 <readcode+0x18>
 184:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_uart>
 188:	c8 2f       	mov	r28, r24
 18a:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_uart>
 18e:	2c 2f       	mov	r18, r28
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	79 01       	movw	r14, r18
 194:	f8 2a       	or	r15, r24
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	0e 94 52 00 	call	0xa4	; 0xa4 <acknowledge_uart>
 19c:	e1 cf       	rjmp	.-62     	; 0x160 <readcode+0x18>
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	21 f5       	brne	.+72     	; 0x1ea <readcode+0xa2>
 1a2:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_uart>
 1a6:	89 30       	cpi	r24, 0x09	; 9
 1a8:	d9 f6       	brne	.-74     	; 0x160 <readcode+0x18>
 1aa:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_uart>
 1ae:	08 2f       	mov	r16, r24
 1b0:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_uart>
 1b4:	10 e0       	ldi	r17, 0x00	; 0
 1b6:	18 2b       	or	r17, r24
 1b8:	01 15       	cp	r16, r1
 1ba:	11 05       	cpc	r17, r1
 1bc:	51 f0       	breq	.+20     	; 0x1d2 <readcode+0x8a>
 1be:	c0 e0       	ldi	r28, 0x00	; 0
 1c0:	d1 e0       	ldi	r29, 0x01	; 1
 1c2:	00 50       	subi	r16, 0x00	; 0
 1c4:	1f 4f       	sbci	r17, 0xFF	; 255
 1c6:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_uart>
 1ca:	89 93       	st	Y+, r24
 1cc:	c0 17       	cp	r28, r16
 1ce:	d1 07       	cpc	r29, r17
 1d0:	d1 f7       	brne	.-12     	; 0x1c6 <readcode+0x7e>
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	0e 94 52 00 	call	0xa4	; 0xa4 <acknowledge_uart>
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	71 e0       	ldi	r23, 0x01	; 1
 1dc:	c7 01       	movw	r24, r14
 1de:	0e 94 62 00 	call	0xc4	; 0xc4 <boot_program_page>
 1e2:	86 e0       	ldi	r24, 0x06	; 6
 1e4:	0e 94 52 00 	call	0xa4	; 0xa4 <acknowledge_uart>
 1e8:	bb cf       	rjmp	.-138    	; 0x160 <readcode+0x18>
 1ea:	84 30       	cpi	r24, 0x04	; 4
 1ec:	09 f0       	breq	.+2      	; 0x1f0 <readcode+0xa8>
 1ee:	b8 cf       	rjmp	.-144    	; 0x160 <readcode+0x18>
 1f0:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_uart>
 1f4:	89 30       	cpi	r24, 0x09	; 9
 1f6:	09 f0       	breq	.+2      	; 0x1fa <readcode+0xb2>
 1f8:	b3 cf       	rjmp	.-154    	; 0x160 <readcode+0x18>
 1fa:	86 e0       	ldi	r24, 0x06	; 6
 1fc:	0e 94 52 00 	call	0xa4	; 0xa4 <acknowledge_uart>
 200:	98 e0       	ldi	r25, 0x08	; 8
 202:	88 e1       	ldi	r24, 0x18	; 24
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	f8 94       	cli
 208:	a8 95       	wdr
 20a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 20e:	0f be       	out	0x3f, r0	; 63
 210:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
 214:	ff cf       	rjmp	.-2      	; 0x214 <readcode+0xcc>

00000216 <bootLoader>:
}

void bootLoader(){
	usart_init();
 216:	0e 94 48 00 	call	0x90	; 0x90 <usart_init>
	DDRB = 0xFF;
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	84 b9       	out	0x04, r24	; 4
 21e:	94 e1       	ldi	r25, 0x14	; 20
	for(uint8_t i=0;i<20;i++){
		PORTB ^= 0xFF;
 220:	85 b1       	in	r24, 0x05	; 5
 222:	80 95       	com	r24
 224:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	2f ef       	ldi	r18, 0xFF	; 255
 228:	30 e7       	ldi	r19, 0x70	; 112
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	21 50       	subi	r18, 0x01	; 1
 22e:	30 40       	sbci	r19, 0x00	; 0
 230:	80 40       	sbci	r24, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <bootLoader+0x16>
 234:	00 c0       	rjmp	.+0      	; 0x236 <bootLoader+0x20>
 236:	00 00       	nop
 238:	91 50       	subi	r25, 0x01	; 1
}

void bootLoader(){
	usart_init();
	DDRB = 0xFF;
	for(uint8_t i=0;i<20;i++){
 23a:	91 f7       	brne	.-28     	; 0x220 <bootLoader+0xa>
		PORTB ^= 0xFF;
		_delay_ms(50);
	}
	PORTB = 0x00;
 23c:	15 b8       	out	0x05, r1	; 5
	DDRB = 0x00;
 23e:	14 b8       	out	0x04, r1	; 4
    readcode();
 240:	0e 94 a4 00 	call	0x148	; 0x148 <readcode>

00000244 <main>:
}

int main(void)
{
   	uint8_t ch = MCUSR;
 244:	84 b7       	in	r24, 0x34	; 52
   	MCUSR = 0;
 246:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	f8 94       	cli
 24c:	a8 95       	wdr
 24e:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 252:	98 61       	ori	r25, 0x18	; 24
 254:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
 258:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 25c:	0f be       	out	0x3f, r0	; 63
   	wdt_disable();
   	if ((ch & _BV(EXTRF))){
 25e:	81 fd       	sbrc	r24, 1
	   	bootLoader();
 260:	0e 94 0b 01 	call	0x216	; 0x216 <bootLoader>
		}
	}
}

void appStart(){
	asm("jmp 0x00000");
 264:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
   	}
   	else{
	   	appStart();
   	}
   	return 0;
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	08 95       	ret

0000026e <_exit>:
 26e:	f8 94       	cli

00000270 <__stop_program>:
 270:	ff cf       	rjmp	.-2      	; 0x270 <__stop_program>
