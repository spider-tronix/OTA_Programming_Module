
SpideyBoot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000206  00007c00  00007c00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b45  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000895  00000000  00000000  00000e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000505  00000000  00000000  00001716  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000452  00000000  00000000  00001cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000293  00000000  00000000  00002102  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00002395  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007c00 <__vectors>:
    7c00:	33 c0       	rjmp	.+102    	; 0x7c68 <__ctors_end>
    7c02:	00 00       	nop
    7c04:	39 c0       	rjmp	.+114    	; 0x7c78 <__bad_interrupt>
    7c06:	00 00       	nop
    7c08:	37 c0       	rjmp	.+110    	; 0x7c78 <__bad_interrupt>
    7c0a:	00 00       	nop
    7c0c:	35 c0       	rjmp	.+106    	; 0x7c78 <__bad_interrupt>
    7c0e:	00 00       	nop
    7c10:	33 c0       	rjmp	.+102    	; 0x7c78 <__bad_interrupt>
    7c12:	00 00       	nop
    7c14:	31 c0       	rjmp	.+98     	; 0x7c78 <__bad_interrupt>
    7c16:	00 00       	nop
    7c18:	2f c0       	rjmp	.+94     	; 0x7c78 <__bad_interrupt>
    7c1a:	00 00       	nop
    7c1c:	2d c0       	rjmp	.+90     	; 0x7c78 <__bad_interrupt>
    7c1e:	00 00       	nop
    7c20:	2b c0       	rjmp	.+86     	; 0x7c78 <__bad_interrupt>
    7c22:	00 00       	nop
    7c24:	29 c0       	rjmp	.+82     	; 0x7c78 <__bad_interrupt>
    7c26:	00 00       	nop
    7c28:	27 c0       	rjmp	.+78     	; 0x7c78 <__bad_interrupt>
    7c2a:	00 00       	nop
    7c2c:	25 c0       	rjmp	.+74     	; 0x7c78 <__bad_interrupt>
    7c2e:	00 00       	nop
    7c30:	23 c0       	rjmp	.+70     	; 0x7c78 <__bad_interrupt>
    7c32:	00 00       	nop
    7c34:	21 c0       	rjmp	.+66     	; 0x7c78 <__bad_interrupt>
    7c36:	00 00       	nop
    7c38:	1f c0       	rjmp	.+62     	; 0x7c78 <__bad_interrupt>
    7c3a:	00 00       	nop
    7c3c:	1d c0       	rjmp	.+58     	; 0x7c78 <__bad_interrupt>
    7c3e:	00 00       	nop
    7c40:	1b c0       	rjmp	.+54     	; 0x7c78 <__bad_interrupt>
    7c42:	00 00       	nop
    7c44:	19 c0       	rjmp	.+50     	; 0x7c78 <__bad_interrupt>
    7c46:	00 00       	nop
    7c48:	17 c0       	rjmp	.+46     	; 0x7c78 <__bad_interrupt>
    7c4a:	00 00       	nop
    7c4c:	15 c0       	rjmp	.+42     	; 0x7c78 <__bad_interrupt>
    7c4e:	00 00       	nop
    7c50:	13 c0       	rjmp	.+38     	; 0x7c78 <__bad_interrupt>
    7c52:	00 00       	nop
    7c54:	11 c0       	rjmp	.+34     	; 0x7c78 <__bad_interrupt>
    7c56:	00 00       	nop
    7c58:	0f c0       	rjmp	.+30     	; 0x7c78 <__bad_interrupt>
    7c5a:	00 00       	nop
    7c5c:	0d c0       	rjmp	.+26     	; 0x7c78 <__bad_interrupt>
    7c5e:	00 00       	nop
    7c60:	0b c0       	rjmp	.+22     	; 0x7c78 <__bad_interrupt>
    7c62:	00 00       	nop
    7c64:	09 c0       	rjmp	.+18     	; 0x7c78 <__bad_interrupt>
	...

00007c68 <__ctors_end>:
    7c68:	11 24       	eor	r1, r1
    7c6a:	1f be       	out	0x3f, r1	; 63
    7c6c:	cf ef       	ldi	r28, 0xFF	; 255
    7c6e:	d8 e0       	ldi	r29, 0x08	; 8
    7c70:	de bf       	out	0x3e, r29	; 62
    7c72:	cd bf       	out	0x3d, r28	; 61
    7c74:	b9 d0       	rcall	.+370    	; 0x7de8 <main>
    7c76:	c5 c0       	rjmp	.+394    	; 0x7e02 <_exit>

00007c78 <__bad_interrupt>:
    7c78:	c3 cf       	rjmp	.-122    	; 0x7c00 <__vectors>

00007c7a <writeUSART>:
#include "bootuart.h"

void  __attribute__((noinline)) __attribute__((leaf)) writeUSART(uint8_t ch) {
    #if (SOFTUART == 0)
        #ifndef LINUART
            while (!(UART_SRA & _BV(UDRE0)));
    7c7a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    7c7e:	95 ff       	sbrs	r25, 5
    7c80:	fc cf       	rjmp	.-8      	; 0x7c7a <writeUSART>
        #else
            while (!(LINSIR & _BV(LTXOK)));
        #endif
    UART_UDR = ch;
    7c82:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    7c86:	08 95       	ret

00007c88 <readUSART>:

uint8_t __attribute__((noinline)) __attribute__((leaf)) readUSART(void) {
  uint8_t ch;
  #if (SOFTUART == 0)
    #ifndef LINUART
        while(!(UART_SRA & _BV(RXC0)));
    7c88:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    7c8c:	87 ff       	sbrs	r24, 7
    7c8e:	fc cf       	rjmp	.-8      	; 0x7c88 <readUSART>
    #else
        while(!(LINSIR & _BV(LRXOK)));
    #endif
    ch = UART_UDR;
    7c90:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    #endif
  return ch;
}
    7c94:	08 95       	ret

00007c96 <WATCHDOG_CONFIG>:
 * time setting
 */
void __attribute__((noinline)) WATCHDOG_CONFIG(uint8_t x) {
  #ifdef WDCE                                           // does it have a Watchdog Change Enable?
    #ifdef WDTCSR
      WDTCSR = _BV(WDCE) | _BV(WDE);
    7c96:	e0 e6       	ldi	r30, 0x60	; 96
    7c98:	f0 e0       	ldi	r31, 0x00	; 0
    7c9a:	98 e1       	ldi	r25, 0x18	; 24
    7c9c:	90 83       	st	Z, r25
    #endif
  #else                                                 // then it must be one of those newfangled ones that use CCP
      CCP = 0xD8;                                       // so write this magic number to CCP
  #endif
  #ifdef WDTCSR
      WDTCSR = x;
    7c9e:	80 83       	st	Z, r24
    7ca0:	08 95       	ret

00007ca2 <bootLoader>:
	LINBTR = (1 << LDISR) | (8 << LBT0);
	LINCR = _BV(LENA) | _BV(LCMD2) | _BV(LCMD1) | _BV(LCMD0);
	LINDAT=0;
	#else
	#if (SINGLESPEED == 0)
	UART_SRA = _BV(U2X0); //Double speed mode USART0
    7ca2:	82 e0       	ldi	r24, 0x02	; 2
    7ca4:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	#endif
	UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    7ca8:	88 e1       	ldi	r24, 0x18	; 24
    7caa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    7cae:	86 e0       	ldi	r24, 0x06	; 6
    7cb0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	UART_SRL = (uint8_t)BAUD_SETTING;
    7cb4:	80 e1       	ldi	r24, 0x10	; 16
    7cb6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	#elif defined(__AVR_ATtiny25__)||defined(__AVR_ATtiny45__)||defined(__AVR_ATtiny85__)
	TCCR1 = 0x0E; //div 8196 - it's an 8-bit timer.
	#elif defined(__AVR_ATtiny43__)
	#error "LED flash for Tiny43 not yet supported"
	#else
	TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7cba:	85 e0       	ldi	r24, 0x05	; 5
    7cbc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	#endif
	#endif
	#if (LED_START_FLASHES > 0)
	/* Set LED pin as output */
	DDRB |= 0xFF;
    7cc0:	84 b1       	in	r24, 0x04	; 4
    7cc2:	8f ef       	ldi	r24, 0xFF	; 255
    7cc4:	84 b9       	out	0x04, r24	; 4
    7cc6:	86 e0       	ldi	r24, 0x06	; 6
    	TIFR = _BV(TOV1);
    	while(!(TIFR & _BV(TOV1)));
	#elif defined(__AVR_ATtiny43__)
  		#error "LED flash for Tiny43 not yet supported"
	#else
  		TCNT1 = -(F_CPU/(1024*16));
    7cc8:	20 e3       	ldi	r18, 0x30	; 48
    7cca:	3c ef       	ldi	r19, 0xFC	; 252
    	TIFR1 = _BV(TOV1);
    7ccc:	41 e0       	ldi	r20, 0x01	; 1
    	TIFR = _BV(TOV1);
    	while(!(TIFR & _BV(TOV1)));
	#elif defined(__AVR_ATtiny43__)
  		#error "LED flash for Tiny43 not yet supported"
	#else
  		TCNT1 = -(F_CPU/(1024*16));
    7cce:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    7cd2:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    	TIFR1 = _BV(TOV1);
    7cd6:	46 bb       	out	0x16, r20	; 22
    	while(!(TIFR1 & _BV(TOV1)));
    7cd8:	b0 9b       	sbis	0x16, 0	; 22
    7cda:	fe cf       	rjmp	.-4      	; 0x7cd8 <bootLoader+0x36>
	#endif   
		PORTB ^= 0xFF;
    7cdc:	95 b1       	in	r25, 0x05	; 5
    7cde:	90 95       	com	r25
    7ce0:	95 b9       	out	0x05, r25	; 5
    7ce2:	81 50       	subi	r24, 0x01	; 1
	} while (--count);
    7ce4:	a1 f7       	brne	.-24     	; 0x7cce <bootLoader+0x2c>
	/* Turn on LED to indicate starting bootloader (less code!) */
	PORTB |= 0xFF;
	#endif
	#endif
    char ch;
    WATCHDOG_CONFIG(WATCHDOG_2S);                        /* Enable watchdog timer for 2 Seconds within which the code is expected to be transferred after which reset occurs */
    7ce6:	8f e0       	ldi	r24, 0x0F	; 15
    7ce8:	d6 df       	rcall	.-84     	; 0x7c96 <WATCHDOG_CONFIG>
	//__asm__ __volatile__ ("cli" ::);        /* Disable Interrupt to avoid any accidental interference during writing */
	//eeprom_busy_wait();                     /* Wait for any ongoing eeprom operation to complete*/
	boot_page_erase(address.word);          /* Erase the page which is going to be re-programmed */     
	boot_spm_busy_wait();                   /* Wait for any ongoing SPM operations to terminate */
	do {
		boot_page_fill((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    7cea:	ff 24       	eor	r15, r15
    7cec:	f3 94       	inc	r15
		addrPtr += 2;
	} while (len -= 2);
	boot_page_write(address.word);          /* Write the buffer page into the actual page in flash */
    7cee:	85 e0       	ldi	r24, 0x05	; 5
    7cf0:	e8 2e       	mov	r14, r24
	boot_spm_busy_wait();                   /* Wait for SPM operation to complete*/
	#if defined(RWWSRE)
	boot_rww_enable ();                     /* Enable Read-while-write(RWW) operations*/
    7cf2:	91 e1       	ldi	r25, 0x11	; 17
    7cf4:	d9 2e       	mov	r13, r25
	    /* If SPIDEY_GETSIGBYTES is transmitted, Code to read Signature Bytes is executed */
	    else if(ch == SPIDEY_GETSIGBYTES) {
		    if(readUSART() == SPIDEY_NODE_ACK) {
			    /* Start for loop for 3 iterations to read the 3 signature bytes*/
			    for(int i=0;i<6;i+=2) {
				    writeUSART(boot_signature_byte_get(i));    /* Read and send signature byte at locations 0 , 2 , 4 */
    7cf6:	21 e2       	ldi	r18, 0x21	; 33
    WATCHDOG_CONFIG(WATCHDOG_2S);                        /* Enable watchdog timer for 2 Seconds within which the code is expected to be transferred after which reset occurs */
    register addr16_t address;
    register pagelen_t Pagelength;
    /* Infinite for loop. The loop will only terminate when watchdog overflow occurs */
    for(;;) {
	    ch = readUSART();
    7cf8:	c2 2e       	mov	r12, r18
    7cfa:	c6 df       	rcall	.-116    	; 0x7c88 <readUSART>
	    /* If SPIDEY_START_TX (check its hex value in protocol documentation) is sent then handshake signals are transmitted */
	    if(ch == SPIDEY_START_TX){
    7cfc:	81 30       	cpi	r24, 0x01	; 1
		    if(readUSART() == SPIDEY_NODE_ACK) {
    7cfe:	21 f4       	brne	.+8      	; 0x7d08 <bootLoader+0x66>
    7d00:	c3 df       	rcall	.-122    	; 0x7c88 <readUSART>
    7d02:	80 31       	cpi	r24, 0x10	; 16
    7d04:	d1 f7       	brne	.-12     	; 0x7cfa <bootLoader+0x58>
			    writeUSART(SPIDEY_ACKNOWLEDGE);                 /*  Acknowledge back */
		    }
	    }
	    /* If SPIDEY_GETSIGBYTES is transmitted, Code to read Signature Bytes is executed */
	    else if(ch == SPIDEY_GETSIGBYTES) {
    7d06:	1a c0       	rjmp	.+52     	; 0x7d3c <bootLoader+0x9a>
    7d08:	87 30       	cpi	r24, 0x07	; 7
		    if(readUSART() == SPIDEY_NODE_ACK) {
    7d0a:	79 f4       	brne	.+30     	; 0x7d2a <bootLoader+0x88>
    7d0c:	bd df       	rcall	.-134    	; 0x7c88 <readUSART>
    7d0e:	80 31       	cpi	r24, 0x10	; 16
    7d10:	a1 f7       	brne	.-24     	; 0x7cfa <bootLoader+0x58>
    7d12:	c0 e0       	ldi	r28, 0x00	; 0
    7d14:	d0 e0       	ldi	r29, 0x00	; 0
			    /* Start for loop for 3 iterations to read the 3 signature bytes*/
			    for(int i=0;i<6;i+=2) {
				    writeUSART(boot_signature_byte_get(i));    /* Read and send signature byte at locations 0 , 2 , 4 */
    7d16:	fe 01       	movw	r30, r28
    7d18:	c0 92 57 00 	sts	0x0057, r12	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7d1c:	84 91       	lpm	r24, Z
    7d1e:	ad df       	rcall	.-166    	; 0x7c7a <writeUSART>
	    }
	    /* If SPIDEY_GETSIGBYTES is transmitted, Code to read Signature Bytes is executed */
	    else if(ch == SPIDEY_GETSIGBYTES) {
		    if(readUSART() == SPIDEY_NODE_ACK) {
			    /* Start for loop for 3 iterations to read the 3 signature bytes*/
			    for(int i=0;i<6;i+=2) {
    7d20:	22 96       	adiw	r28, 0x02	; 2
    7d22:	c6 30       	cpi	r28, 0x06	; 6
    7d24:	d1 05       	cpc	r29, r1
    7d26:	b9 f7       	brne	.-18     	; 0x7d16 <bootLoader+0x74>
			    }
			    writeUSART(SPIDEY_ACKNOWLEDGE);                /*  Acknowledge back */
		    }
	    }
	    /* If SPIDEY_LOAD_ADDRESS is transmitted then code to receive 16 bit address is executed */
	    else if(ch == SPIDEY_LOAD_ADDRESS) {
    7d28:	09 c0       	rjmp	.+18     	; 0x7d3c <bootLoader+0x9a>
		    if(readUSART() == SPIDEY_NODE_ACK) {
    7d2a:	85 30       	cpi	r24, 0x05	; 5
    7d2c:	51 f4       	brne	.+20     	; 0x7d42 <bootLoader+0xa0>
    7d2e:	ac df       	rcall	.-168    	; 0x7c88 <readUSART>
			    address.bytes[0] = readUSART();		/* Receive LOW byte of address */
    7d30:	80 31       	cpi	r24, 0x10	; 16
    7d32:	19 f7       	brne	.-58     	; 0x7cfa <bootLoader+0x58>
    7d34:	a9 df       	rcall	.-174    	; 0x7c88 <readUSART>
			    address.bytes[1] = readUSART();		/* Receive HIGH byte of address */
    7d36:	18 2f       	mov	r17, r24
    7d38:	a7 df       	rcall	.-178    	; 0x7c88 <readUSART>
			    writeUSART(SPIDEY_ACKNOWLEDGE);
    7d3a:	08 2f       	mov	r16, r24
    7d3c:	86 e0       	ldi	r24, 0x06	; 6
    7d3e:	9d df       	rcall	.-198    	; 0x7c7a <writeUSART>
		    }
	    }
	    /*If SPIDEY_START_PROGMODE is transmitted then execute code to receive page length followed by code to be written to flash*/
	    else if(ch == SPIDEY_START_PROGMODE) {
    7d40:	dc cf       	rjmp	.-72     	; 0x7cfa <bootLoader+0x58>
    7d42:	82 30       	cpi	r24, 0x02	; 2
		    if(readUSART() == SPIDEY_NODE_ACK) {
    7d44:	09 f0       	breq	.+2      	; 0x7d48 <bootLoader+0xa6>
    7d46:	30 c0       	rjmp	.+96     	; 0x7da8 <bootLoader+0x106>
    7d48:	9f df       	rcall	.-194    	; 0x7c88 <readUSART>
    7d4a:	80 31       	cpi	r24, 0x10	; 16
			    pagelen_t savelength;
			    GETLENGTH(Pagelength);                   /*Get Page length*/
    7d4c:	b1 f6       	brne	.-84     	; 0x7cfa <bootLoader+0x58>
    7d4e:	9c df       	rcall	.-200    	; 0x7c88 <readUSART>
    7d50:	b8 2e       	mov	r11, r24
    7d52:	9a df       	rcall	.-204    	; 0x7c88 <readUSART>
    7d54:	c0 e0       	ldi	r28, 0x00	; 0
    7d56:	d1 e0       	ldi	r29, 0x01	; 1
			    savelength = Pagelength;
			    uint8_t *bufPtr;
			    /* Loop as many times as page length to receive as many bytes of code */
			    bufPtr = buff.bptr;
			    do {
				    *bufPtr++ = readUSART();
    7d58:	97 df       	rcall	.-210    	; 0x7c88 <readUSART>
    7d5a:	89 93       	st	Y+, r24
    7d5c:	bc 12       	cpse	r11, r28
			    } while (--Pagelength);
    7d5e:	fc cf       	rjmp	.-8      	; 0x7d58 <bootLoader+0xb6>
    7d60:	83 e0       	ldi	r24, 0x03	; 3
			    writeUSART(SPIDEY_DATA_RECIEVED);      /* Inform Node that all data as been received correctly */
    7d62:	8b df       	rcall	.-234    	; 0x7c7a <writeUSART>
    7d64:	81 2f       	mov	r24, r17
    7d66:	90 2f       	mov	r25, r16
    7d68:	23 e0       	ldi	r18, 0x03	; 3
    7d6a:	fc 01       	movw	r30, r24
	uint16_t addrPtr = address.word;
	//uint8_t sreg;
	//sreg = SREG;                            /* Copy present state of SREG Register */
	//__asm__ __volatile__ ("cli" ::);        /* Disable Interrupt to avoid any accidental interference during writing */
	//eeprom_busy_wait();                     /* Wait for any ongoing eeprom operation to complete*/
	boot_page_erase(address.word);          /* Erase the page which is going to be re-programmed */     
    7d6c:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7d70:	e8 95       	spm
    7d72:	07 b6       	in	r0, 0x37	; 55
    7d74:	00 fc       	sbrc	r0, 0
	boot_spm_busy_wait();                   /* Wait for any ongoing SPM operations to terminate */
    7d76:	fd cf       	rjmp	.-6      	; 0x7d72 <bootLoader+0xd0>
    7d78:	a0 e0       	ldi	r26, 0x00	; 0
    7d7a:	b1 e0       	ldi	r27, 0x01	; 1
    7d7c:	fc 01       	movw	r30, r24
    7d7e:	2d 91       	ld	r18, X+
    7d80:	3d 91       	ld	r19, X+
	do {
		boot_page_fill((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    7d82:	09 01       	movw	r0, r18
    7d84:	f0 92 57 00 	sts	0x0057, r15	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7d88:	e8 95       	spm
    7d8a:	11 24       	eor	r1, r1
    7d8c:	32 96       	adiw	r30, 0x02	; 2
    7d8e:	ba 12       	cpse	r11, r26
    7d90:	f6 cf       	rjmp	.-20     	; 0x7d7e <bootLoader+0xdc>
		addrPtr += 2;
	} while (len -= 2);
    7d92:	fc 01       	movw	r30, r24
	boot_page_write(address.word);          /* Write the buffer page into the actual page in flash */
    7d94:	e0 92 57 00 	sts	0x0057, r14	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7d98:	e8 95       	spm
	boot_spm_busy_wait();                   /* Wait for SPM operation to complete*/
    7d9a:	07 b6       	in	r0, 0x37	; 55
    7d9c:	00 fc       	sbrc	r0, 0
	#if defined(RWWSRE)
	boot_rww_enable ();                     /* Enable Read-while-write(RWW) operations*/
    7d9e:	fd cf       	rjmp	.-6      	; 0x7d9a <bootLoader+0xf8>
    7da0:	d0 92 57 00 	sts	0x0057, r13	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7da4:	e8 95       	spm
			    boot_program_page(address, buff, savelength);    /* Write contents of buffer array into page in flash whose address we earlier received */
			    writeUSART(SPIDEY_ACKNOWLEDGE);
		    }
	    }
	    /* If SPIDEY_CHECK_FLASH is sent code to receive page length followed by reading a page from flash and sending it to Node is executed */
	    else if(ch == SPIDEY_CHECK_FLASH) {
    7da6:	ca cf       	rjmp	.-108    	; 0x7d3c <bootLoader+0x9a>
    7da8:	89 30       	cpi	r24, 0x09	; 9
		    if(readUSART() == SPIDEY_NODE_ACK) {
    7daa:	91 f4       	brne	.+36     	; 0x7dd0 <bootLoader+0x12e>
    7dac:	6d df       	rcall	.-294    	; 0x7c88 <readUSART>
    7dae:	80 31       	cpi	r24, 0x10	; 16
    7db0:	09 f0       	breq	.+2      	; 0x7db4 <bootLoader+0x112>
			    GETLENGTH(Pagelength);                   /*Get Page length*/
    7db2:	a3 cf       	rjmp	.-186    	; 0x7cfa <bootLoader+0x58>
    7db4:	69 df       	rcall	.-302    	; 0x7c88 <readUSART>
    7db6:	c8 2f       	mov	r28, r24
    7db8:	67 df       	rcall	.-306    	; 0x7c88 <readUSART>
			    /* Loop as many times as page length and send bytes continuously */
			    do {
				    writeUSART(pgm_read_byte(address.word++));
    7dba:	e1 2f       	mov	r30, r17
    7dbc:	f0 2f       	mov	r31, r16
    7dbe:	cf 01       	movw	r24, r30
    7dc0:	01 96       	adiw	r24, 0x01	; 1
    7dc2:	18 2f       	mov	r17, r24
    7dc4:	09 2f       	mov	r16, r25
    7dc6:	84 91       	lpm	r24, Z
    7dc8:	58 df       	rcall	.-336    	; 0x7c7a <writeUSART>
			    } while (--Pagelength);
    7dca:	c1 50       	subi	r28, 0x01	; 1
    7dcc:	b1 f7       	brne	.-20     	; 0x7dba <bootLoader+0x118>
    7dce:	b6 cf       	rjmp	.-148    	; 0x7d3c <bootLoader+0x9a>
			    writeUSART(SPIDEY_ACKNOWLEDGE);
		    }
	    }
	    /* If SPIDEY_END_TX is sent terminate the transmission */
	    else if(ch == SPIDEY_END_TX) {
    7dd0:	84 30       	cpi	r24, 0x04	; 4
    7dd2:	09 f0       	breq	.+2      	; 0x7dd6 <bootLoader+0x134>
    7dd4:	92 cf       	rjmp	.-220    	; 0x7cfa <bootLoader+0x58>
		    writeUSART(SPIDEY_ACKNOWLEDGE);
    7dd6:	86 e0       	ldi	r24, 0x06	; 6
    7dd8:	50 df       	rcall	.-352    	; 0x7c7a <writeUSART>
    7dda:	56 df       	rcall	.-340    	; 0x7c88 <readUSART>
		    if(readUSART() == SPIDEY_NODE_ACK) {
    7ddc:	80 31       	cpi	r24, 0x10	; 16
    7dde:	09 f0       	breq	.+2      	; 0x7de2 <bootLoader+0x140>
    7de0:	8c cf       	rjmp	.-232    	; 0x7cfa <bootLoader+0x58>
    7de2:	88 e0       	ldi	r24, 0x08	; 8
    7de4:	58 df       	rcall	.-336    	; 0x7c96 <WATCHDOG_CONFIG>
			    WATCHDOG_CONFIG(WATCHDOG_16MS);      /* Set watchdog timer for 16ms so that the MCU resets within without further delay */
    7de6:	ff cf       	rjmp	.-2      	; 0x7de6 <bootLoader+0x144>

00007de8 <main>:
    7de8:	cf 93       	push	r28
    7dea:	c4 b7       	in	r28, 0x34	; 52
    7dec:	14 be       	out	0x34, r1	; 52
	ch = MCUCSR;
	#else
	ch = MCUSR;
	#endif
   	MCUSR = 0;
   	WATCHDOG_CONFIG(0);       /* Disable watchdog timer */
    7dee:	80 e0       	ldi	r24, 0x00	; 0
    7df0:	52 df       	rcall	.-348    	; 0x7c96 <WATCHDOG_CONFIG>
   	if ((ch & _BV(EXTRF))){   /* If it was External Reset, execute bootloader */
	   	bootLoader();
    7df2:	c1 fd       	sbrc	r28, 1
    7df4:	56 df       	rcall	.-340    	; 0x7ca2 <bootLoader>
	return;
}

/* Function to start execution of application code from 0x00000 */
static inline void appStart() {  
	asm("jmp 0x00000");
    7df6:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
   	}
   	else{                     /* If it was any other type of Reset, execute application code */
	   	appStart();
   	}
   	return 0;
}
    7dfa:	80 e0       	ldi	r24, 0x00	; 0
    7dfc:	90 e0       	ldi	r25, 0x00	; 0
    7dfe:	cf 91       	pop	r28
    7e00:	08 95       	ret

00007e02 <_exit>:
    7e02:	f8 94       	cli

00007e04 <__stop_program>:
    7e04:	ff cf       	rjmp	.-2      	; 0x7e04 <__stop_program>
