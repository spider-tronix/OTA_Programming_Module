
SpideyBoot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028c  00007c00  00007c00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000100  00800100  00800100  00000300  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b66  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a5  00000000  00000000  00000f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c8  00000000  00000000  000017eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00001db4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000468  00000000  00000000  00001e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a5  00000000  00000000  000022d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002679  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007c00 <__vectors>:
    7c00:	0c 94 34 3e 	jmp	0x7c68	; 0x7c68 <__ctors_end>
    7c04:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c08:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c0c:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c10:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c14:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c18:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c1c:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c20:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c24:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c28:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c2c:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c30:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c34:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c38:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c3c:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c40:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c44:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c48:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c4c:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c50:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c54:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c58:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c5c:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c60:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>
    7c64:	0c 94 46 3e 	jmp	0x7c8c	; 0x7c8c <__bad_interrupt>

00007c68 <__ctors_end>:
    7c68:	11 24       	eor	r1, r1
    7c6a:	1f be       	out	0x3f, r1	; 63
    7c6c:	cf ef       	ldi	r28, 0xFF	; 255
    7c6e:	d8 e0       	ldi	r29, 0x08	; 8
    7c70:	de bf       	out	0x3e, r29	; 62
    7c72:	cd bf       	out	0x3d, r28	; 61

00007c74 <__do_clear_bss>:
    7c74:	22 e0       	ldi	r18, 0x02	; 2
    7c76:	a0 e0       	ldi	r26, 0x00	; 0
    7c78:	b1 e0       	ldi	r27, 0x01	; 1
    7c7a:	01 c0       	rjmp	.+2      	; 0x7c7e <.do_clear_bss_start>

00007c7c <.do_clear_bss_loop>:
    7c7c:	1d 92       	st	X+, r1

00007c7e <.do_clear_bss_start>:
    7c7e:	a0 30       	cpi	r26, 0x00	; 0
    7c80:	b2 07       	cpc	r27, r18
    7c82:	e1 f7       	brne	.-8      	; 0x7c7c <.do_clear_bss_loop>
    7c84:	0e 94 2f 3f 	call	0x7e5e	; 0x7e5e <main>
    7c88:	0c 94 44 3f 	jmp	0x7e88	; 0x7e88 <_exit>

00007c8c <__bad_interrupt>:
    7c8c:	0c 94 00 3e 	jmp	0x7c00	; 0x7c00 <__vectors>

00007c90 <writeUSART>:
#include "bootuart.h"

void  __attribute__((noinline)) __attribute__((leaf)) writeUSART(uint8_t ch) {
    #if (SOFTUART == 0)
        #ifndef LINUART
            while (!(UART_SRA & _BV(UDRE0)));
    7c90:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    7c94:	95 ff       	sbrs	r25, 5
    7c96:	fc cf       	rjmp	.-8      	; 0x7c90 <writeUSART>
        #else
            while (!(LINSIR & _BV(LTXOK)));
        #endif
    UART_UDR = ch;
    7c98:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    7c9c:	08 95       	ret

00007c9e <readUSART>:

uint8_t __attribute__((noinline)) __attribute__((leaf)) readUSART(void) {
  uint8_t ch;
  #if (SOFTUART == 0)
    #ifndef LINUART
        while(!(UART_SRA & _BV(RXC0)));
    7c9e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    7ca2:	87 ff       	sbrs	r24, 7
    7ca4:	fc cf       	rjmp	.-8      	; 0x7c9e <readUSART>
    #else
        while(!(LINSIR & _BV(LRXOK)));
    #endif
    ch = UART_UDR;
    7ca6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    #endif
  return ch;
}
    7caa:	08 95       	ret

00007cac <UART_Setup>:
		}
	}
}

void appStart(){
	asm("jmp 0x00000");
    7cac:	82 e0       	ldi	r24, 0x02	; 2
    7cae:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    7cb2:	88 e1       	ldi	r24, 0x18	; 24
    7cb4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    7cb8:	86 e0       	ldi	r24, 0x06	; 6
    7cba:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    7cbe:	80 e1       	ldi	r24, 0x10	; 16
    7cc0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    7cc4:	08 95       	ret

00007cc6 <boot_program_page>:
    7cc6:	1f 93       	push	r17
    7cc8:	cf 93       	push	r28
    7cca:	df 93       	push	r29
    7ccc:	4f b7       	in	r20, 0x3f	; 63
    7cce:	f8 94       	cli
    7cd0:	f9 99       	sbic	0x1f, 1	; 31
    7cd2:	fe cf       	rjmp	.-4      	; 0x7cd0 <boot_program_page+0xa>
    7cd4:	23 e0       	ldi	r18, 0x03	; 3
    7cd6:	fc 01       	movw	r30, r24
    7cd8:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7cdc:	e8 95       	spm
    7cde:	07 b6       	in	r0, 0x37	; 55
    7ce0:	00 fc       	sbrc	r0, 0
    7ce2:	fd cf       	rjmp	.-6      	; 0x7cde <boot_program_page+0x18>
    7ce4:	eb 01       	movw	r28, r22
    7ce6:	c0 58       	subi	r28, 0x80	; 128
    7ce8:	df 4f       	sbci	r29, 0xFF	; 255
    7cea:	db 01       	movw	r26, r22
    7cec:	51 e0       	ldi	r21, 0x01	; 1
    7cee:	bc 01       	movw	r22, r24
    7cf0:	6a 1b       	sub	r22, r26
    7cf2:	7b 0b       	sbc	r23, r27
    7cf4:	1c 91       	ld	r17, X
    7cf6:	fb 01       	movw	r30, r22
    7cf8:	ea 0f       	add	r30, r26
    7cfa:	fb 1f       	adc	r31, r27
    7cfc:	11 96       	adiw	r26, 0x01	; 1
    7cfe:	2c 91       	ld	r18, X
    7d00:	11 97       	sbiw	r26, 0x01	; 1
    7d02:	30 e0       	ldi	r19, 0x00	; 0
    7d04:	32 2f       	mov	r19, r18
    7d06:	22 27       	eor	r18, r18
    7d08:	21 0f       	add	r18, r17
    7d0a:	31 1d       	adc	r19, r1
    7d0c:	09 01       	movw	r0, r18
    7d0e:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7d12:	e8 95       	spm
    7d14:	11 24       	eor	r1, r1
    7d16:	12 96       	adiw	r26, 0x02	; 2
    7d18:	ca 17       	cp	r28, r26
    7d1a:	db 07       	cpc	r29, r27
    7d1c:	59 f7       	brne	.-42     	; 0x7cf4 <boot_program_page+0x2e>
    7d1e:	25 e0       	ldi	r18, 0x05	; 5
    7d20:	fc 01       	movw	r30, r24
    7d22:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7d26:	e8 95       	spm
    7d28:	07 b6       	in	r0, 0x37	; 55
    7d2a:	00 fc       	sbrc	r0, 0
    7d2c:	fd cf       	rjmp	.-6      	; 0x7d28 <boot_program_page+0x62>
    7d2e:	81 e1       	ldi	r24, 0x11	; 17
    7d30:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7d34:	e8 95       	spm
    7d36:	4f bf       	out	0x3f, r20	; 63
    7d38:	df 91       	pop	r29
    7d3a:	cf 91       	pop	r28
    7d3c:	1f 91       	pop	r17
    7d3e:	08 95       	ret

00007d40 <readcode>:
    7d40:	9f e0       	ldi	r25, 0x0F	; 15
    7d42:	88 e1       	ldi	r24, 0x18	; 24
    7d44:	0f b6       	in	r0, 0x3f	; 63
    7d46:	f8 94       	cli
    7d48:	a8 95       	wdr
    7d4a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    7d4e:	0f be       	out	0x3f, r0	; 63
    7d50:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    7d54:	c0 e0       	ldi	r28, 0x00	; 0
    7d56:	d0 e0       	ldi	r29, 0x00	; 0
    7d58:	91 e2       	ldi	r25, 0x21	; 33
    7d5a:	d9 2e       	mov	r13, r25
    7d5c:	0e 94 4f 3e 	call	0x7c9e	; 0x7c9e <readUSART>
    7d60:	81 30       	cpi	r24, 0x01	; 1
    7d62:	29 f4       	brne	.+10     	; 0x7d6e <readcode+0x2e>
    7d64:	0e 94 4f 3e 	call	0x7c9e	; 0x7c9e <readUSART>
    7d68:	80 31       	cpi	r24, 0x10	; 16
    7d6a:	c1 f7       	brne	.-16     	; 0x7d5c <readcode+0x1c>
    7d6c:	47 c0       	rjmp	.+142    	; 0x7dfc <readcode+0xbc>
    7d6e:	87 30       	cpi	r24, 0x07	; 7
    7d70:	91 f4       	brne	.+36     	; 0x7d96 <readcode+0x56>
    7d72:	0e 94 4f 3e 	call	0x7c9e	; 0x7c9e <readUSART>
    7d76:	80 31       	cpi	r24, 0x10	; 16
    7d78:	89 f7       	brne	.-30     	; 0x7d5c <readcode+0x1c>
    7d7a:	00 e0       	ldi	r16, 0x00	; 0
    7d7c:	10 e0       	ldi	r17, 0x00	; 0
    7d7e:	f8 01       	movw	r30, r16
    7d80:	d0 92 57 00 	sts	0x0057, r13	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7d84:	84 91       	lpm	r24, Z
    7d86:	0e 94 48 3e 	call	0x7c90	; 0x7c90 <writeUSART>
    7d8a:	0e 5f       	subi	r16, 0xFE	; 254
    7d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    7d8e:	06 30       	cpi	r16, 0x06	; 6
    7d90:	11 05       	cpc	r17, r1
    7d92:	a9 f7       	brne	.-22     	; 0x7d7e <readcode+0x3e>
    7d94:	33 c0       	rjmp	.+102    	; 0x7dfc <readcode+0xbc>
    7d96:	85 30       	cpi	r24, 0x05	; 5
    7d98:	61 f4       	brne	.+24     	; 0x7db2 <readcode+0x72>
    7d9a:	0e 94 4f 3e 	call	0x7c9e	; 0x7c9e <readUSART>
    7d9e:	80 31       	cpi	r24, 0x10	; 16
    7da0:	e9 f6       	brne	.-70     	; 0x7d5c <readcode+0x1c>
    7da2:	0e 94 4f 3e 	call	0x7c9e	; 0x7c9e <readUSART>
    7da6:	c8 2f       	mov	r28, r24
    7da8:	0e 94 4f 3e 	call	0x7c9e	; 0x7c9e <readUSART>
    7dac:	d0 e0       	ldi	r29, 0x00	; 0
    7dae:	d8 2b       	or	r29, r24
    7db0:	25 c0       	rjmp	.+74     	; 0x7dfc <readcode+0xbc>
    7db2:	82 30       	cpi	r24, 0x02	; 2
    7db4:	39 f5       	brne	.+78     	; 0x7e04 <readcode+0xc4>
    7db6:	0e 94 4f 3e 	call	0x7c9e	; 0x7c9e <readUSART>
    7dba:	80 31       	cpi	r24, 0x10	; 16
    7dbc:	79 f6       	brne	.-98     	; 0x7d5c <readcode+0x1c>
    7dbe:	0e 94 4f 3e 	call	0x7c9e	; 0x7c9e <readUSART>
    7dc2:	08 2f       	mov	r16, r24
    7dc4:	0e 94 4f 3e 	call	0x7c9e	; 0x7c9e <readUSART>
    7dc8:	10 e0       	ldi	r17, 0x00	; 0
    7dca:	18 2b       	or	r17, r24
    7dcc:	80 e0       	ldi	r24, 0x00	; 0
    7dce:	e8 2e       	mov	r14, r24
    7dd0:	81 e0       	ldi	r24, 0x01	; 1
    7dd2:	f8 2e       	mov	r15, r24
    7dd4:	c7 01       	movw	r24, r14
    7dd6:	80 50       	subi	r24, 0x00	; 0
    7dd8:	91 40       	sbci	r25, 0x01	; 1
    7dda:	80 17       	cp	r24, r16
    7ddc:	91 07       	cpc	r25, r17
    7dde:	30 f4       	brcc	.+12     	; 0x7dec <readcode+0xac>
    7de0:	0e 94 4f 3e 	call	0x7c9e	; 0x7c9e <readUSART>
    7de4:	f7 01       	movw	r30, r14
    7de6:	81 93       	st	Z+, r24
    7de8:	7f 01       	movw	r14, r30
    7dea:	f4 cf       	rjmp	.-24     	; 0x7dd4 <readcode+0x94>
    7dec:	83 e0       	ldi	r24, 0x03	; 3
    7dee:	0e 94 48 3e 	call	0x7c90	; 0x7c90 <writeUSART>
    7df2:	60 e0       	ldi	r22, 0x00	; 0
    7df4:	71 e0       	ldi	r23, 0x01	; 1
    7df6:	ce 01       	movw	r24, r28
    7df8:	0e 94 63 3e 	call	0x7cc6	; 0x7cc6 <boot_program_page>
    7dfc:	86 e0       	ldi	r24, 0x06	; 6
    7dfe:	0e 94 48 3e 	call	0x7c90	; 0x7c90 <writeUSART>
    7e02:	ac cf       	rjmp	.-168    	; 0x7d5c <readcode+0x1c>
    7e04:	84 30       	cpi	r24, 0x04	; 4
    7e06:	09 f0       	breq	.+2      	; 0x7e0a <readcode+0xca>
    7e08:	a9 cf       	rjmp	.-174    	; 0x7d5c <readcode+0x1c>
    7e0a:	0e 94 4f 3e 	call	0x7c9e	; 0x7c9e <readUSART>
    7e0e:	80 31       	cpi	r24, 0x10	; 16
    7e10:	09 f0       	breq	.+2      	; 0x7e14 <readcode+0xd4>
    7e12:	a4 cf       	rjmp	.-184    	; 0x7d5c <readcode+0x1c>
    7e14:	86 e0       	ldi	r24, 0x06	; 6
    7e16:	0e 94 48 3e 	call	0x7c90	; 0x7c90 <writeUSART>
    7e1a:	98 e0       	ldi	r25, 0x08	; 8
    7e1c:	88 e1       	ldi	r24, 0x18	; 24
    7e1e:	0f b6       	in	r0, 0x3f	; 63
    7e20:	f8 94       	cli
    7e22:	a8 95       	wdr
    7e24:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    7e28:	0f be       	out	0x3f, r0	; 63
    7e2a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    7e2e:	ff cf       	rjmp	.-2      	; 0x7e2e <readcode+0xee>

00007e30 <bootLoader>:
}

void bootLoader(){
    UART_Setup();
    7e30:	0e 94 56 3e 	call	0x7cac	; 0x7cac <UART_Setup>
	DDRB = 0xFF;
    7e34:	8f ef       	ldi	r24, 0xFF	; 255
    7e36:	84 b9       	out	0x04, r24	; 4
    7e38:	85 e0       	ldi	r24, 0x05	; 5
	for(uint8_t i=0;i<5;i++){
		PORTB ^= 0xFF;
    7e3a:	95 b1       	in	r25, 0x05	; 5
    7e3c:	90 95       	com	r25
    7e3e:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    7e40:	2f ef       	ldi	r18, 0xFF	; 255
    7e42:	30 e7       	ldi	r19, 0x70	; 112
    7e44:	92 e0       	ldi	r25, 0x02	; 2
    7e46:	21 50       	subi	r18, 0x01	; 1
    7e48:	30 40       	sbci	r19, 0x00	; 0
    7e4a:	90 40       	sbci	r25, 0x00	; 0
    7e4c:	e1 f7       	brne	.-8      	; 0x7e46 <bootLoader+0x16>
    7e4e:	00 c0       	rjmp	.+0      	; 0x7e50 <bootLoader+0x20>
    7e50:	00 00       	nop
    7e52:	81 50       	subi	r24, 0x01	; 1
}

void bootLoader(){
    UART_Setup();
	DDRB = 0xFF;
	for(uint8_t i=0;i<5;i++){
    7e54:	91 f7       	brne	.-28     	; 0x7e3a <bootLoader+0xa>
		PORTB ^= 0xFF;
		_delay_ms(50);
	}
	PORTB = 0x00;
    7e56:	15 b8       	out	0x05, r1	; 5
	DDRB = 0x00;
    7e58:	14 b8       	out	0x04, r1	; 4
    readcode();
    7e5a:	0e 94 a0 3e 	call	0x7d40	; 0x7d40 <readcode>

00007e5e <main>:
}

int main(void)
{
   	uint8_t ch = MCUSR;
    7e5e:	84 b7       	in	r24, 0x34	; 52
   	MCUSR = 0;
    7e60:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    7e62:	0f b6       	in	r0, 0x3f	; 63
    7e64:	f8 94       	cli
    7e66:	a8 95       	wdr
    7e68:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    7e6c:	98 61       	ori	r25, 0x18	; 24
    7e6e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    7e72:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    7e76:	0f be       	out	0x3f, r0	; 63
   	wdt_disable();
   	if ((ch & _BV(EXTRF))){
    7e78:	81 fd       	sbrc	r24, 1
	   	bootLoader();
    7e7a:	0e 94 18 3f 	call	0x7e30	; 0x7e30 <bootLoader>
		}
	}
}

void appStart(){
	asm("jmp 0x00000");
    7e7e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
   	}
   	else{
	   	appStart();
   	}
   	return 0;
    7e82:	80 e0       	ldi	r24, 0x00	; 0
    7e84:	90 e0       	ldi	r25, 0x00	; 0
    7e86:	08 95       	ret

00007e88 <_exit>:
    7e88:	f8 94       	cli

00007e8a <__stop_program>:
    7e8a:	ff cf       	rjmp	.-2      	; 0x7e8a <__stop_program>
